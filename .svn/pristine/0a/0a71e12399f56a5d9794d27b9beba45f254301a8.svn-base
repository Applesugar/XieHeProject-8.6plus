using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Runtime.InteropServices;
using System.Net.Sockets;
using System.IO;
using System.Windows;
using Microsoft.Kinect.Tools;
using System.Threading;

namespace XieHeProject
{


    class PhoneConnection
    {

        [DllImport("user32.dll", EntryPoint = "FindWindow", SetLastError = true)]
        private static extern IntPtr FindWindow(string lpClassName, string lpWindowName);
        [DllImport("user32.dll", EntryPoint = "FindWindowEx", SetLastError = true)]
        private static extern IntPtr FindWindowEx(IntPtr hwndParent, uint hwndChildAfter, string lpszClass, string lpszWindow);
        [DllImport("user32.dll", EntryPoint = "SendMessage", SetLastError = true, CharSet = CharSet.Auto)]
        private static extern int SendMessage(IntPtr hwnd, uint wMsg, int wParam, int lParam);
        [DllImport("user32.dll", EntryPoint = "SetForegroundWindow", SetLastError = true)]
        private static extern void SetForegroundWindow(IntPtr hwnd);

        private string rootDir = "C:";
        private string peopleID = "";
        private string peopleDir = "";
        private string currentProject = "";
        private int command = 0;
        private string data = "";
        private DateTime start;
        private DateTime end;

        //代表一个录像KStudio的使用者
        KStudioClient RecordClient;

        //代表一次录像
        KStudioRecording recording;

        public string PeopleDir
        {
            get
            {
                return peopleDir;
            }
        }

        public string CurrentProject
        {
            get
            {
                return currentProject;
            }
        }

        public string PeopleID
        {
            get
            {
                return peopleID;
            }
        }

       
        
        private Boolean isRecording = false;
        private Boolean isReceivingMsg = false;

        private enum messsageType
        {
            START_COUNTING=100,
            STOP_COUNTING=101,
            START_RECORD=111,
            STOP_RECORD=112,
            PATIENT_ID=200


        }


        //接收指令
        public void ReceiveCommand()
        {
            int HOST_PORT = 8003;
            TcpListener listener = new TcpListener(HOST_PORT);
            listener.Start();

            Console.Write("Waiting for connection...");
            //AddItem(lst_Receive, "Waiting for connection...");
            TcpClient client = listener.AcceptTcpClient();
            Console.WriteLine("Connection accepted.");
            //AddItem(lst_Receive, "Connection accepted.");


            NetworkStream ns = client.GetStream();
            isReceivingMsg = true;

            while (true == isReceivingMsg)
            {
                byte[] bytes = new byte[1024];
                int bytesRead = ns.Read(bytes, 0, bytes.Length);
                String str = Encoding.UTF8.GetString(bytes, 0, bytesRead);
                Console.WriteLine(str);
                //AddItem(lst_Receive, str);
                String[] s = str.Split(new char[] { ':' });
                try
                {
                    command = int.Parse(s[0]);
                    data = s[1].Substring(0, s[1].Length - 1);
                    IntPtr hwndCalc = FindWindow(null, "步态采集");
                    SetForegroundWindow(hwndCalc);
                    System.Windows.Forms.SendKeys.SendWait("^3");
                    //dealCommand(command, data);
                }
                catch (Exception e)
                {
                    //AddItem(lst_Receive, e.ToString());
                    isReceivingMsg = false;
                }
            }

            ns.Close();
            client.Close();
            listener.Stop();

            MessageBox.Show("连接失效，请重新连接");
            //alertdialog 
            //
            //

        }

        
        //处理指令
        public void dealCommand()
        {
            switch (command)
            {
                case (int)messsageType.START_RECORD:
                    {
                        //更新项目号
                        currentProject = data;
                        IntPtr hwndCalc = FindWindow(null, "步态采集");
                        SetForegroundWindow(hwndCalc);
                        System.Windows.Forms.SendKeys.SendWait("^1");
                        addPeopleLog(currentProject+"开始");
                        //startRecord();
                    }
                    break;
                case (int)messsageType.STOP_RECORD:
                    {
                        IntPtr hwndCalc = FindWindow(null, "步态采集");
                        SetForegroundWindow(hwndCalc);
                        System.Windows.Forms.SendKeys.SendWait("^2");
                        addPeopleLog(currentProject + "结束");
                        //stopRecord();
                    }
                    break;
                case (int)messsageType.START_COUNTING:
                    {

                        string[] times = data.Split(new char[] { ' ' });
                        string time = times[1] + ":" + times[2] +":"+ times[3] +":"+ times[4];
                        start = DateTime.Now;
                        addPeopleLog(currentProject+"开始计时:"+time);
                    }
                    break;
                case (int)messsageType.STOP_COUNTING:
                    {
                        string[] times = data.Split(new char[] { ' ' });
                        string time = times[1] + ":" + times[2] + ":" + times[3] + ":" + times[4];
                        end = DateTime.Now;
                        TimeSpan ts = end.Subtract(start);
                        addPeopleLog(currentProject + "结束计时:" + time );
                        addPeopleLog(currentProject + "用时:" + ts.TotalSeconds + "秒");
                    }
                    break;
                case (int)messsageType.PATIENT_ID:
                {
                    peopleID = data;
                    createPeopleDir();
                }
               
                break;
            }
        }


        //设定储存目录 
        public void setStoreDir()
        {
            System.Windows.Forms.FolderBrowserDialog df = new System.Windows.Forms.FolderBrowserDialog();

            //设置文件浏览对话框上的描述内容   
            df.Description = "选择所有xef文件保存的根目录地址";

            //不显示对话框下方的创建新文件夹按钮   
            df.ShowNewFolderButton = true;

            /*  
         判断是否已直接输入文件夹目录地址，如果存在则将此值赋于对话框的已选地址，这样就可以让对话框显示您上次选择或添加的目录地址了。  
            */
            
            //显示文件夹对话框，并返回对话框处理结果数值   
            System.Windows.Forms.DialogResult result = df.ShowDialog();
            if (result == System.Windows.Forms.DialogResult.OK) //另外一种判断办法 if (df.ShowDialog(this) == DialogResult.OK)   
            {
                //将中的数据库目录地址赋于类全局变量数据库根目录   
                string folderPath = df.SelectedPath;
                if (folderPath != "")
                {
                    rootDir = folderPath;

                }
            }
        }

        //创建病人文件夹
        private void createPeopleDir()
        {
            string dir = rootDir;
            if (peopleID != "")
            {
                dir +="\\"+peopleID.ToString();
                if (!Directory.Exists(dir))
                    Directory.CreateDirectory(dir);
                peopleDir = dir;
                addPeopleLog("建立目录：" + peopleDir);
            }
            else 
                MessageBox.Show("人员ID为空，请重新扫码！" + dir);
           
        }

        //添加病人日志
        private void addPeopleLog(string content)
        {
            if (Directory.Exists(peopleDir))
            {
                TxtWrite(content, peopleDir + "\\log.txt");
            }
            //AddItem(lst_Receive, content);
        }

        /// <summary>
        /// //true表示正在使用,false没有使用  
        /// </summary>
        /// <param name="fileName"></param>
        /// <returns></returns>

        //发送开始录制的指令
        private void startRecord()
        {
            

            if (!isRecording)
            {
                IntPtr hwndCalc = FindWindow(null, "步态采集");
                SetForegroundWindow(hwndCalc);
                System.Windows.Forms.SendKeys.SendWait("^1");
                isRecording = true;
            }


            if (!Directory.Exists(rootDir))
            {
                MessageBox.Show("rootDir is not exist!");
                // return false;
            }



        }

        //发送结束录制的指令
        private bool stopRecord()
        {
            if (isRecording)
            {
                IntPtr hwndCalc = FindWindow(null, "步态采集");
                SetForegroundWindow(hwndCalc);
                System.Windows.Forms.SendKeys.SendWait("^2");
            }
            isRecording = false;

            return true;
        }

        public void StartRecordClip(object filePath)
        {
            //Monitor.Enter(this);
            Mutex mutex = new Mutex(false);
            mutex.WaitOne();
            RecordClient = KStudio.CreateClient();
            if (RecordClient != null)
            {

                RecordClient.ConnectToService();
                KStudioEventStreamSelectorCollection streamCollection = new KStudioEventStreamSelectorCollection();
                streamCollection.Add(KStudioEventStreamDataTypeIds.Ir);
                streamCollection.Add(KStudioEventStreamDataTypeIds.Depth);
                streamCollection.Add(KStudioEventStreamDataTypeIds.Body);
                streamCollection.Add(KStudioEventStreamDataTypeIds.BodyIndex);
                //streamCollection.Add(KStudioEventStreamDataTypeIds.UncompressedColor);
                //streamCollection.Add(KStudioEventStreamDataTypeIds.CompressedColor);
                recording = RecordClient.CreateRecording((string)filePath, streamCollection);
                //Thread.Sleep(100);
                if (recording != null)
                {
                    recording.Start();
                    /*
                    while (recording.State == KStudioRecordingState.Recording)
                    {
                        //Thread.Sleep(500);
                    }
                    **/
                    /*
                    if (recording.State == KStudioRecordingState.Error)
                    {
                        throw new InvalidOperationException("Error: Recording failed!");
                    }
                     * */

                }

                //RecordClient.DisconnectFromService();
            }
            //Monitor.Exit(this);
            mutex.ReleaseMutex();
        }



        //停止录像
        public  void StopRecordClip()
        {
            //Monitor.Enter(this);
            Mutex mutex = new Mutex(false);
            mutex.WaitOne();
            if (RecordClient != null)
            {
                if (recording != null)
                {
                    if (recording.State == KStudioRecordingState.Recording)
                    {
                        recording.Stop();
                        recording.Dispose();
                        recording = null;
                    }
                }
                //Thread.Sleep(00);
                RecordClient.DisconnectFromService();
                RecordClient.Dispose();
                RecordClient = null;
                //System.Windows.Forms.MessageBox.Show("录像完成");
            }
            //Monitor.Exit(this);
            mutex.ReleaseMutex();
        }


        private void TxtWrite(string strToWrite, string filename)
        {
            DateTime now = DateTime.Now;


            FileStream fs = new FileStream(filename, FileMode.OpenOrCreate, FileAccess.Write);
            StreamWriter sw = new StreamWriter(fs);
            sw.BaseStream.Seek(0, SeekOrigin.End);
            //sw.WriteLine("当前时间:"+DateTime.Now.ToString("hh:mm:ss")+":"+now.ToString() + ":" + now.ToString("fff") + ": " + strToWrite);
            sw.WriteLine(now.ToString() + ":" + now.ToString("fff") + ": " + strToWrite);
            sw.Close();
        }

        
    }
}
